<!DOCTYPE html>
<html>

<head>
    <title>Converation Chat</title>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, minimal-ui">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.100.2/css/materialize.min.css">

    <style>
        .animated {
            animation-duration: 1s;
            animation-fill-mode: both;
            animation-timing-function: ease-in;
        }

        @keyframes shake {
            0%, 100% {
                transform: translateX(0);
            }
            10%, 30%, 50%, 70%, 90% {
                transform: translateX(-10px);
            }
            20%, 40%, 60%, 80% {
                transform: translateX(10px);
            }
        }

        .shake {
            animation-name: shake;
        }

        [v-cloak] {
            display: none;
        }

        body {
            background: #FFFFFF;
            display: flex;
            min-height: 100vh;
            flex-direction: column;
        }

        .main-container {
            width: 100%;
            position: fixed;
            overflow-y: auto;
            height: 100%;
        }

        .gatos {
            margin: 0 auto;
            padding: 0px 0 150px;
        }

        .message {
            margin-bottom: 1px;
        }

        .page-footer {
            padding-top: 1px;
        }

        #footcon {
            margin: 0 auto;
            padding: 0px 0 150px;
        }

        #footer {
            margin-bottom: 0px;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 100px;
            position: fixed;
        }

        loading {
            background-color: rgba(206, 206, 206, 0.50);
            line-height: 1.3;
            text-align: center;
        }

        .dot {
            width: .5rem;
            height: .5rem;
            border-radius: .5rem;
            display: inline-block;
            background-color: #919292
        }

        .dot:nth-last-child(1) {
            margin-left: .3rem;
            animation: loading .6s .3s linear infinite
        }

        .dot:nth-last-child(2) {
            margin-left: .3rem;
            animation: loading .6s .2s linear infinite
        }

        .dot:nth-last-child(3) {
            animation: loading .6s .1s linear infinite
        }

        @keyframes loading {
            0 {
                transform: translate(0, 0);
                background-color: #ababab
            }
            25% {
                transform: translate(0, -3px)
            }
            50% {
                transform: translate(0, 0);
                background-color: #ababab
            }
            75% {
                transform: translate(0, 3px)
            }
            100% {
                transform: translate(0, 0)
            }
        }
    </style>
</head>

<body>

    <div id="app">

        <div class="navbar-fixed" id="header">
            <nav>
                <div class="nav-wrapper navbar white">

                    <span class="grey-text" style="margin-left: 30px; font-size: 24px;">Starter Chat</span>
                    <ul class="right grey-text">
                        <li><a @click="reload" class="btn-floating waves-effect waves-light"><i class="material-icons">refresh</i></a></li>
                    </ul>
                </div>
            </nav>
        </div>

        <main class="main-container" :class="do_shake">

            <div class="container gatos" id="main">

                <template v-for="(msg, index) in messages">

                    <template v-if="msg.who == 'bot'">

                        <div class="row" style="margin-bottom: 2px;">
                            <div :key="msg.timestamp" class="bot col card-panel grey lighten-5" style="text-align: left; max-width: 80%; display: block; border-radius: 20px; padding-top: 18px; padding-bottom: 18px; margin-bottom: 1px;">
                                <div class="row valign-wrapper message">
                                    <img v-bind:src="bot_img" v-show="bot_img" alt="(+_+)" class="circle " style="margin-left: 10px; height: 42px;">
                                    <span class="title" style="word-break: break-all; margin-left: 8px; margin-right: 10px; font-size: 15px;" v-html="msg.text"></span>
                                    <div v-if="msg.loading" class="botui-message-content loading" style="margin-right: 10px;">
                                        <i class="dot"></i>
                                        <i class="dot"></i>
                                        <i class="dot"></i>
                                    </div>
                                </div>

                                <template v-if="msg.select">
                                    <br>
                                    <div class="collection">
                                        <a v-for="label in msg.select" v-on:click.stop.prevent="send_msg(label)" href="#" class="collection-item">{{ label }}</a>
                                    </div>
                                </template>

            </div>
            <!-- col card -->

    </div>
    <!-- row -->

    <div class="row">
        <span style="color: #888888; font-size: 12px;">{{ msg.timestamp }}</span>
    </div>

    </template>

    <template v-if="msg.who == 'human'">

                        <div class="row" style="margin-bottom: 2px;">
                            <div :id="msg.id" class="col card-panel white-text right" style="float: right; max-width: 80%; background-color: #00afdd; border-radius: 20px; padding-top: 18px; padding-bottom: 18px; margin-bottom: 1px;">
                                <div class="row valign-wrapper message" style="padding-left: 10px;">
                                    <span style="margin-left: auto; margin-right: 10px; font-size: 15px;">{{ msg.text }}</span>
                                    <img v-bind:src="human_img" v-show="human_img" alt="(^_^)" class="circle" style="margin-right: 10px; height: 42px;">
                                </div>
                            </div> <!-- col card -->
                        </div> <!-- row -->

                        <div class="right" style="float: right; text-align: right;">
                            <span style="height: 100px; color: #888888; font-size: 12px;">{{ msg.timestamp }}</span>
                        </div>
                    </template>

    </template>

    </div>

    </main>

    <div class="row grey lighten-4 black-text page-footer" id="footer">

        <div class="container" id="footcon">
            <div class="input-field col s10">
                <input ref="input" @keypress.enter="send_msg(user_input)" v-model="user_input" type="text" placeholder="質問を入力してください">
            </div>
            <div class="input-field col s1">
                <button v-on:click="send_msg(user_input)" style="background-color: #0063b2;" class="btn waves-effect waves-light btn-floating btn-large" type="button" name="action">
                    <i class="material-icons right">send</i>
                    </button>
            </div>
        </div>

    </div>

    </div>


    <script type="text/javascript" src="https://code.jquery.com/jquery-3.2.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/vue@2.5.0/dist/vue.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.100.2/js/materialize.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js"></script>


    <script>
        function format_time(dateobj) {
            var hour_str = ('0' + dateobj.getHours()).slice(-2);
            var min_str = ('0' + dateobj.getMinutes()).slice(-2);
            return hour_str + ":" + min_str;
        };
        var app = new Vue({
            el: '#app',
            data: {
                context: {},
                do_shake: "",
                scroll_top: 0,
                idx: -1,
                id_cnt: 0,
                user_input: "",
                messages: [],
                bot_img: "<%= bot_icon_url %>",
                human_img: "<%= human_icon_url %>",
                debug_mode: <%= debug_mode %>,
                sorry_msg: "もうしわけありません。調子が悪いようです。",
                empty_msg: "すみません。答えが見つかりませんでした。",
            },

            mounted: function() {
                this.$refs.input.focus();
                console.log("DEBUG MODE:" + this.debug_mode)
                this.bot_init();
            },

            methods: {
                countdown() {
                    if (this.messages.length == 0) {
                        this.bot_init();
                        app.do_shake = "animated shake";
                        setTimeout(function() {
                            app.do_shake = "";
                        }, 1000);

                        return
                    } else {
                        this.messages.pop()
                        setTimeout(function() {
                            app.countdown()
                        }, 10);
                    }
                },

                reload() {
                    this.countdown()
                },

                send_msg(msg) {
                    console.log(msg)
                    if (msg === "") return

                    this.id_cnt += 1;
                    var new_msg = {
                        who: "human",
                        text: msg,
                        show: true,
                        id: "human_" + this.id_cnt,
                        timestamp: format_time(new Date()),
                    }
                    app.messages.push(new_msg);
                    this.scrollDown();
                    this.bot_submit(msg);
                },

                bot_init() {
                    console.log("bot_init")
                    var answer = {
                        who: "bot",
                        text: "",
                        loading: true,
                        show: false,
                        timestamp: format_time(new Date()),
                    }
                    this.idx = this.messages.push(answer) - 1;

                    axios.get('/api/bot_init')
                        .then(function(res) {
                            console.log(res)
                            app.context = res.data.context;

                            var idx = app.idx;
                            app.messages[idx].loading = false

                            if (res.data.output.error) {
                                var err_msg = "ノードでエラーが発生しています";
                                console.error(err_msg);
                                console.error(res.data.output.error);
                                if (app.debug_mode) {
                                    app.messages[idx].text = err_msg;
                                } else {
                                    app.messages[idx].text = app.sorry_msg;
                                }
                            } else {
                                if (res.data.output.text.length === 0) {
                                    var err_msg = "応答メッセージが空っぽです"
                                    console.error(err_msg)
                                    if (app.debug_mode) {
                                        app.messages[idx].text = err_msg;
                                    } else {
                                        app.messages[idx].text = app.empty_msg;
                                    }
                                } else {
                                    app.messages[idx].text = app.auto_link(res.data.output.text[0])
                                }
                            }
                            app.scrollDown();
                        })
                        .catch(function(error) {
                            var err_msg = "リクエストがエラーになりました";
                            console.error(err_msg);
                            console.error(error);
                            var idx = app.idx;
                            app.messages[idx].loading = false
                            if (app.debug_mode) {
                                app.messages[idx].text = err_msg;
                            } else {
                                app.messages[idx].text = app.sorry_msg;
                            }
                            app.scrollDown();
                        });
                },

                bot_submit(msg) {

                    var answer = {
                        who: "bot",
                        text: "",
                        loading: true,
                        show: false,
                        timestamp: format_time(new Date()),
                    }
                    app.idx = app.messages.push(answer) - 1;

                    axios.post('/api/send_message', {
                            input: msg,
                            context: app.context
                        })
                        .then(function(res) {
                            console.log(res)
                            var idx = app.idx;
                            app.context = res.data.context;
                            app.messages[idx].loading = false

                            if (res.data.output.error) {
                                var err_msg = "ノードでエラーが発生しています";
                                console.error(err_msg);
                                console.error(res.data.output.error);
                                if (app.debug_mode) {
                                    app.messages[idx].text = err_msg;
                                } else {
                                    app.messages[idx].text = app.sorry_msg;
                                }
                            } else {
                                if (res.data.output.text.length == 0) {
                                    var err_msg = "応答メッセージが空っぽです";
                                    console.error(err_msg);
                                    if (app.debug_mode) {
                                        app.messages[idx].text = err_msg;
                                    } else {
                                        app.messages[idx].text = app.empty_msg;
                                    }
                                } else {
                                    app.messages[idx].text = app.auto_link(res.data.output.text[0])
                                    for (var i = 1; i < res.data.output.text.length; i += 1) {
                                        app.messages.push({
                                            who: "bot",
                                            text: app.auto_link(res.data.output.text[i]),
                                            loading: false,
                                            show: true,
                                            timestamp: format_time(new Date()),
                                        })

                                    }
                                }
                            }
                            app.scrollDown();
                        })
                        .catch(function(error) {
                            var err_msg = "リクエストがエラーになりました";
                            console.error(err_msg);
                            console.error(error);
                            var idx = app.idx;
                            app.messages[idx].loading = false
                            if (app.debug_mode) {
                                app.messages[idx].text = err_msg;
                            } else {
                                app.messages[idx].text = app.sorry_msg;
                            }
                            app.scrollDown();
                        });
                    this.user_input = ""
                },

                recv_msg(msg) {

                    setTimeout(function() {
                        var more = {
                            who: "bot",
                            text: "その他、回答候補はこちらです。",
                            select: msg.selection,
                        }

                        app.messages.push(more)
                        console.log("done")
                        app.scrollDown();
                    }, 2000);
                },

                auto_link(str) {
                    var regexp_url = /http(s)?:\/\/([\w-]+\.)+[\w-]+(\/[\w- ./?%&=]*)?/;
                    var regexp_makeLink = function(href) {
                        return '<a href="' + href + '" target=”_blank”>' + href + '</a>';
                    }
                    return str.replace(regexp_url, regexp_makeLink);
                },

                scrollDown() {
                    var target = this.$el.querySelector('.main-container');
                    setTimeout(() => {
                        var height = target.scrollHeight - target.offsetHeight;
                        target.scrollTop += 2;
                        if (height <= target.scrollTop) {
                            return;
                        } else {
                            this.scrollDown();
                        }
                    }, 0);
                },
            }
        });
    </script>

</body>

</html>
